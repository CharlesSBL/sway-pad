#!/usr/bin/env python3
import curses
import locale
import toml
import os
import re
import sys
import time  # Add this import
import logging
import chardet
import unicodedata
import codecs
import traceback
import subprocess
import tempfile
import threading

from pygments import lex
from pygments.lexers import get_lexer_by_name, guess_lexer, TextLexer
from pygments.token import Token


# –õ–∏–Ω—Ç–µ—Ä
def run_pylint_on_code(code, filename="tmp.py"):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç pylint –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º –∫–æ–¥–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–≤–æ–¥ –ª–∏–Ω—Ç–µ—Ä–∞.
    –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –ø–æ—Å–ª–µ —á–µ–≥–æ pylint –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ç–æ—Ç —Ñ–∞–π–ª.
    –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç –≤ 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∞–Ω–∏—è.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        code (str): –°—Ç—Ä–æ–∫–∞ —Å –∫–æ–¥–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
        filename (str): –ò–º—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "tmp.py").
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –í—ã–≤–æ–¥ pylint –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏.
    """
    # –ï—Å–ª–∏ –∫–æ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100000 —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    if len(code) > 100000:
        return "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ pylint"
        
    with tempfile.NamedTemporaryFile(mode="w", suffix=".py", delete=False) as tmp:
        tmp.write(code)
        tmp_name = tmp.name
    try:
        result = subprocess.run(
            ["pylint", tmp_name, "--output-format=text"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            timeout=3  # —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
        )
        output = result.stdout.strip()
        return output
    except subprocess.TimeoutExpired:
        return "Pylint: –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ."
    except Exception as e:
        return f"Pylint error: {str(e)}"
    finally:
        try:
            os.remove(tmp_name)
        except Exception:
            pass


# =================================================================
# 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (`config.toml`)
#    —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
#    –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏.
# -----------------------------------------------------------------

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONFIG_FILE = "config.toml"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='editor.log',
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s (%(filename)s:%(lineno)d)'
)

def deep_merge(base, override):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π.
    –ï—Å–ª–∏ –∫–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –æ–±–æ–∏—Ö —Å–ª–æ–≤–∞—Ä—è—Ö –∏ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ–≤–∞—Ä—è–º–∏,
    –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ override –∑–∞–º–µ–Ω—è–µ—Ç base.
    """
    result = base.copy()
    for key, value in override.items():
        if key in result and isinstance(result[key], dict) and isinstance(value, dict):
            result[key] = deep_merge(result[key], value)
        else:
            result[key] = value
    return result


def load_config():
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ config.toml —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """
    default_config = {
        "colors": {
            "line_number": "yellow",
            "cursor": "yellow",
            "keyword": "blue",
            "string": "green",
            "comment": "white",
            "literal": "magenta",
            "decorator": "cyan",
            "type": "yellow",
            "selector": "magenta",
            "property": "cyan",
            "punctuation": "white",
            "background": "#1E1E1E",
            "foreground": "#D4D4D4",
            "error": "red",           # –î–ª—è –æ—à–∏–±–æ–∫
            "status": "bright_white", # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
            "variable": "white",      # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            "tag": "blue",            # HTML/XML —Ç–µ–≥–∏
            "attribute": "cyan",      # –ê—Ç—Ä–∏–±—É—Ç—ã
            "magic": "magenta",       # –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
            "builtin": "yellow",      # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            "exception": "red",       # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
            "function": "light_blue", # –§—É–Ω–∫—Ü–∏–∏
            "class": "yellow",        # –ö–ª–∞—Å—Å—ã
            "number": "magenta",      # –ß–∏—Å–ª–∞
            "operator": "white",      # –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
            "escape": "cyan"          # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        },
        "fonts": {
            "font_family": "monospace",
            "font_size": 12
        },
        "keybindings": {
            "delete": "del",
            "paste": "ctrl+v",
            "copy": "ctrl+c",
            "cut": "ctrl+x",
            "undo": "ctrl+z",
            "open_file": "ctrl+o",
            "save_file": "ctrl+s",
            "select_all": "ctrl+a",
            "quit": "ctrl+q"
        },
        "editor": {
            "show_line_numbers": True,
            "tab_size": 4,
            "use_spaces": True,
            "word_wrap": False,
            "auto_indent": True,
            "auto_brackets": True
        },
        "supported_formats": {
            "python" : [".py"],
            "toml" : [".toml"],
            "javascript": [".js", ".mjs", ".cjs", ".jsx"],
            "css": [".css"],
            "html": [".html", ".htm"],
            "json": [".json"],
            "yaml": [".yaml", ".yml"],
            "xml": [".xml"],
            "markdown": [".md"],
            "plaintext": [".txt"],
            "shell": [".sh", ".bash", ".zsh"],
            "dart": [".dart"],
            "go": [".go"],
            "c_cpp": [".c", ".cpp", ".h", ".hpp"],
            "java": [".java"],
            "julia": [".jl"],
            "rust": [".rs"],
            "csharp": [".cs"],
            "dockerfile": ["Dockerfile"],
            "terraform": [".tf"],
            "jenkins": ["Jenkinsfile"],
            "puppet": [".pp"],
            "saltstack": [".sls"],
            "git": [".gitignore", ".gitconfig", "config"],
            "notebook": [".ipynb"],
        },
        "theme": {
            "name": "dark",
            "ui": {
                "background": "#252526",
                "foreground": "#CCCCCC",
                "accent": "#007ACC",
                "selection": "#264F78",
                "inactive_selection": "#3A3D41",
                "cursor": "#AEAFAD"
            }
        },
        "file_icons": {
            "text": "üìÑ",
            "code": "üìù",
            "css": "üé®",
            "html": "üåê",
            "json": "üìä",
            "yaml": "‚öôÔ∏è",
            "folder": "üìÅ",
            "folder_open": "üìÇ"
        },
        "syntax_highlighting": {
            "python": {
                "patterns": [
                    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ Python
                    {"pattern": r"\b(and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b", "color": "keyword"},
                    # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
                    {"pattern": r"@\w+(?:\([^)]*?\))?", "color": "decorator"},
                    # –°—Ç—Ä–æ–∫–æ–≤—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã (—Ç—Ä–æ–π–Ω—ã–µ –∏ –æ–±—ã—á–Ω—ã–µ)
                    {"pattern": r"(?s)(f|r|rf|fr)?('''(.|\n)*?'''|\"\"\"(.|\n)*?\"\"\")", "color": "string"},
                    {"pattern": r"(f|r|rf|fr|b|br|rb)?(['\"])(?:\\.|(?!\2).)*\2", "color": "string"},
                    # –ß–∏—Å–ª–æ–≤—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã
                    {"pattern": r"\b(?:\d+\.\d+|\.\d+|\d+)(?:e[+-]?\d+)?j?\b", "color": "literal"},
                    {"pattern": r"\b0[bB][01_]+\b", "color": "literal"},
                    {"pattern": r"\b0[oO][0-7_]+\b", "color": "literal"},
                    {"pattern": r"\b0[xX][0-9a-fA-F_]+\b", "color": "literal"},
                    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ docstrings
                    {"pattern": r"#.*$", "color": "comment"},
                    {"pattern": r'"""(.|\n)*?"""', "color": "comment"},
                    {"pattern": r"'''(.|\n)*?'''", "color": "comment"},
                    # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                    {"pattern": r"\b(ArithmeticError|AssertionError|AttributeError|BaseException|BlockingIOError|BrokenPipeError|BufferError|BytesWarning|ChildProcessError|ConnectionAbortedError|ConnectionError|ConnectionRefusedError|ConnectionResetError|DeprecationWarning|EOFError|Ellipsis|EncodingWarning|EnvironmentError|Exception|FileExistsError|FileNotFoundError|FloatingPointError|FutureWarning|GeneratorExit|IOError|ImportError|ImportWarning|IndentationError|IndexError|InterruptedError|IsADirectoryError|KeyError|KeyboardInterrupt|LookupError|MemoryError|ModuleNotFoundError|NameError|NotADirectoryError|NotImplemented|NotImplementedError|OSError|OverflowError|PendingDeprecationWarning|PermissionError|ProcessLookupError|RecursionError|ReferenceError|ResourceWarning|RuntimeError|RuntimeWarning|StopAsyncIteration|StopIteration|SyntaxError|SyntaxWarning|SystemError|SystemExit|TabError|TimeoutError|TypeError|UnboundLocalError|UnicodeDecodeError|UnicodeEncodeError|UnicodeError|UnicodeTranslateError|UnicodeWarning|UserWarning|ValueError|Warning|ZeroDivisionError|__import__|abs|all|any|ascii|bin|bool|breakpoint|bytearray|bytes|callable|chr|classmethod|compile|complex|copyright|credits|delattr|dict|dir|divmod|enumerate|eval|exec|exit|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|isinstance|issubclass|iter|len|license|list|locals|map|max|memoryview|min|next|object|oct|open|ord|pow|print|property|range|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|vars|zip)\b", "color": "builtin"},
                    # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤
                    {"pattern": r"\b(List|Dict|Tuple|Set|Optional|Union|Any|Callable|TypeVar|Generic|Iterable|Iterator|Sequence|Mapping|MutableMapping|Awaitable|Coroutine|AsyncIterable|NamedTuple|TypedDict|Final|Literal|Annotated|TypeGuard|Self|Protocol|dataclass|field|classmethod|staticmethod)\b", "color": "type"},
                    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                    {"pattern": r"r[\"'].*?[\"']", "color": "regexp"},
                    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
                    {"pattern": r"\b(True|False|None|Ellipsis|NotImplemented)\b", "color": "literal"},
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                    {"pattern": r"__(?:init|new|str|repr|enter|exit|getattr|setattr|delattr|getitem|setitem|delitem|iter|next|call|len|contains|add|sub|mul|truediv|floordiv|mod|pow|lshift|rshift|and|or|xor|invert|eq|ne|lt|le|gt|ge|bool|bytes|format|hash|dir|sizeof|getstate|setstate|reduce|reduce_ex|subclasshook|del|doc|name|qualname|module|defaults|kwdefaults|annotations|dict|weakref|slots|class|self|cls)__(?=\()", "color": "magic"},
                    # –ò–º–ø–æ—Ä—Ç—ã
                    {"pattern": r"\bimport\s+\w+(?:\.\w+)*\b", "color": "import"},
                    {"pattern": r"\bfrom\s+\w+(?:\.\w+)*\s+import\b", "color": "import"}
                ]
            },
            "javascript": {
                "patterns": [
                    {"pattern": r"//.*$", "color": "comment"},
                    {"pattern": r"/\*[\s\S]*?\*/", "color": "comment"},
                    {"pattern": r"\b(let|const|var|function|return|if|else|for|while|do|switch|case|break|continue|try|catch|finally|new|delete|typeof|instanceof|this|class|extends|super|import|export|from|as|async|await|yield)\b", "color": "keyword"},
                    {"pattern": r"`[^`]*`", "color": "string"},
                    {"pattern": r"\"[^\"]*\"", "color": "string"},
                    {"pattern": r"\b(\d+(\.\d+)?|true|false|null|undefined|NaN|Infinity)\b", "color": "literal"},
                    {"pattern": r"console\.log", "color": "keyword"},
                    {"pattern": r"\$\{[^}]*\}", "color": "literal"}
                ]
            },
            # –î—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }
    }
    try:
        with open(CONFIG_FILE, "r", encoding="utf-8") as f:
            config_content = f.read()
            try:
                user_config = toml.loads(config_content)
                merged_config = deep_merge(default_config, user_config)
                return merged_config
            except toml.TomlDecodeError as e:
                logging.error(f"TOML parse error: {str(e)}")
                logging.error(f"Config content:\n{config_content}")
                return default_config
    except FileNotFoundError:
        logging.warning(f"Config file '{CONFIG_FILE}' not found. Using defaults.")
        return default_config


#################################################################
class SwayEditor:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ Sway.
    """
    def __init__(self, stdscr):
        self.stdscr = stdscr
        # Enable special keys handling
        self.stdscr.keypad(True)  # Enable keypad mode
        curses.raw()              # Raw mode for better key handling
        curses.nonl()            # Don't translate enter key
        curses.noecho()          # Don't echo keys
        self.config = load_config()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ config.toml
        self.text = [""]
        self.cursor_x = 0
        self.cursor_y = 0
        self.scroll_top = 0
        self.scroll_left = 0
        self.filename = "new_file.py" 
        #self.filename = "noname"
        self.modified = False
        self.encoding = "UTF-8"
        self.stdscr.nodelay(False)
        locale.setlocale(locale.LC_ALL, "")
        curses.start_color()
        curses.use_default_colors()
        curses.curs_set(1)
        self.insert_mode = True
        self.syntax_highlighting = {}
        self.status_message = ""
        
        self.init_colors()
        self.keybindings = {
            "delete": self.parse_key(self.config["keybindings"].get("delete", "del")),
            "paste": self.parse_key(self.config["keybindings"].get("paste", "ctrl+v")),
            "copy": self.parse_key(self.config["keybindings"].get("copy", "ctrl+c")),
            "cut": self.parse_key(self.config["keybindings"].get("cut", "ctrl+x")),
            "undo": self.parse_key(self.config["keybindings"].get("undo", "ctrl+z")),
            "open_file": self.parse_key(self.config["keybindings"].get("open_file", "ctrl+o")),
            "save_file": self.parse_key(self.config["keybindings"].get("save_file", "ctrl+s")),
            "select_all": self.parse_key(self.config["keybindings"].get("select_all", "ctrl+a")),
            "quit": self.parse_key(self.config["keybindings"].get("quit", "ctrl+q")),
        }
        self.load_syntax_highlighting()
        self.set_initial_cursor_position()



    def apply_syntax_highlighting_with_pygments(self, line):
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Pygments –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏.
        –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Å —Ü–≤–µ—Ç–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏ curses –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            line (str): —Å—Ç—Ä–æ–∫–∞ –∫–æ–¥–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            list –∫–æ—Ä—Ç–µ–∂–µ–π: –∫–∞–∂–¥—ã–π –∫–æ—Ä—Ç–µ–∂ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ü–≤–µ—Ç curses.
        """
        try:
            if self.filename and self.filename != "noname":
                lexer = get_lexer_by_name(self.detect_language())
            else:
                lexer = guess_lexer(line)
        except Exception:
            lexer = TextLexer()

        tokens = list(lex(line, lexer))

        token_color_map = {
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            Token.Keyword:                    curses.color_pair(2),
            Token.Keyword.Constant:           curses.color_pair(2),
            Token.Keyword.Declaration:        curses.color_pair(2),
            Token.Keyword.Namespace:          curses.color_pair(2),
            Token.Keyword.Pseudo:             curses.color_pair(2),
            Token.Keyword.Reserved:           curses.color_pair(2),
            Token.Keyword.Type:               curses.color_pair(2),
            # –ò–º–µ–Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –¥—Ä—É–≥–∏–µ –∏–º–µ–Ω–∞
            Token.Name.Builtin:               curses.color_pair(2),
            Token.Name.Function:              curses.color_pair(3),
            Token.Name.Class:                 curses.color_pair(3),
            Token.Name.Decorator:             curses.color_pair(5),
            Token.Name.Exception:             curses.color_pair(4),
            Token.Name.Variable:              curses.color_pair(7),
            Token.Name.Namespace:             curses.color_pair(2),
            Token.Name.Attribute:             curses.color_pair(7),
            Token.Name.Tag:                   curses.color_pair(5),
            # –°—Ç—Ä–æ–∫–æ–≤—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã
            Token.Literal.String:             curses.color_pair(3),
            Token.Literal.String.Doc:         curses.color_pair(3),
            Token.Literal.String.Interpol:    curses.color_pair(3),
            Token.Literal.String.Escape:      curses.color_pair(3),
            Token.Literal.String.Backtick:    curses.color_pair(3),
            Token.Literal.String.Delimiter:   curses.color_pair(3),
            # –ß–∏—Å–ª–æ–≤—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã
            Token.Literal.Number:             curses.color_pair(4),
            Token.Literal.Number.Float:       curses.color_pair(4),
            Token.Literal.Number.Hex:         curses.color_pair(4),
            Token.Literal.Number.Integer:     curses.color_pair(4),
            Token.Literal.Number.Oct:         curses.color_pair(4),
            # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            Token.Comment:                    curses.color_pair(1),
            Token.Comment.Multiline:          curses.color_pair(1),
            Token.Comment.Preproc:            curses.color_pair(1),
            Token.Comment.Special:            curses.color_pair(1),
            # –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            Token.Operator:                   curses.color_pair(6),
            Token.Operator.Word:              curses.color_pair(6),
            Token.Punctuation:                curses.color_pair(6),
            # –ü—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ç–µ–∫—Å—Ç
            Token.Text:                       curses.color_pair(0),
            Token.Text.Whitespace:            curses.color_pair(0),
            # –û—à–∏–±–∫–∏
            Token.Error:                      curses.color_pair(8),
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ Generic
            Token.Generic.Heading:            curses.color_pair(5) | curses.A_BOLD,
            Token.Generic.Subheading:         curses.color_pair(5),
            Token.Generic.Deleted:            curses.color_pair(8),
            Token.Generic.Inserted:           curses.color_pair(4),
            Token.Generic.Emph:               curses.color_pair(3) | curses.A_BOLD,
            Token.Generic.Strong:             curses.color_pair(2) | curses.A_BOLD,
            Token.Generic.Prompt:             curses.color_pair(7),
        }
        default_color = curses.color_pair(0)
        highlighted = []
        for token, text in tokens:
            color = default_color
            for token_type, curses_color in token_color_map.items():
                if token in token_type:
                    color = curses_color
                    break
            highlighted.append((text, color))
        return highlighted


    def run_pylint_async(self, code):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ pylint. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É.
        –ó–¥–µ—Å—å –º—ã –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –≤—ã–≤–æ–¥–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å—Ç–∞—Ç—É—Å.
        """
        lint_output = run_pylint_on_code(code)
        if lint_output:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –ø–æ–∫–∞–∑—ã–≤–∞—è –Ω–∞—á–∞–ª–æ –≤—ã–≤–æ–¥–∞ –ª–∏–Ω—Ç–µ—Ä–∞
            self.status_message = f"Pylint: {lint_output[:200]}..."  # –æ–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –≤—ã–≤–æ–¥
        else:
            self.status_message = f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {self.filename} –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ—Ç pylint."




    # ---------------------------------------------------------------
    # 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞.
    # ---------------------------------------------------------------
    def set_initial_cursor_position(self):
        self.cursor_x = 0
        self.cursor_y = 0
        self.scroll_top = 0
        self.scroll_left = 0

    # ---------------------------------------------------------------
    # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
    # ---------------------------------------------------------------
    def init_colors(self):
        bg_color = -1
        curses.init_pair(1, curses.COLOR_BLUE, bg_color)
        curses.init_pair(2, curses.COLOR_GREEN, bg_color)
        curses.init_pair(3, curses.COLOR_MAGENTA, bg_color)
        curses.init_pair(4, curses.COLOR_YELLOW, bg_color)
        curses.init_pair(5, curses.COLOR_CYAN, bg_color)
        curses.init_pair(6, curses.COLOR_WHITE, bg_color)
        curses.init_pair(7, curses.COLOR_YELLOW, bg_color)
        curses.init_pair(8, curses.COLOR_BLACK, curses.COLOR_YELLOW)
        self.colors = {
            "error": curses.color_pair(8),
            "line_number": curses.color_pair(7),
            "status": curses.color_pair(6),
            "comment": curses.color_pair(1),
            "keyword": curses.color_pair(2),
            "string": curses.color_pair(3),
            "variable": curses.color_pair(6),
            "punctuation": curses.color_pair(6),
            "literal": curses.color_pair(4),
            "decorator": curses.color_pair(5),
            "type": curses.color_pair(4),
            "selector": curses.color_pair(2),
            "property": curses.color_pair(5),
            "tag": curses.color_pair(2),
            "attribute": curses.color_pair(3),
        }


    # ---------------------------------------------------------------
    # 5. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    #    –∑–∞—Ä–∞–Ω–µ–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π.
    # ---------------------------------------------------------------

    def apply_syntax_highlighting(self, line, lang):
        """
        –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Pygments.
        –ú–µ—Ç–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å—Ç—Ä–æ–∫–∏.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            line (str): –°—Ç—Ä–æ–∫–∞ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å.
            lang (str): –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            list –∫–æ—Ä—Ç–µ–∂–µ–π: –ö–∞–∂–¥—ã–π –∫–æ—Ä—Ç–µ–∂ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞—Ä—É curses.
        """
        return self.apply_syntax_highlighting_with_pygments(line)

    

    # --------------------------------------------------------------
    # 6. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–∞–≤–∏–ª —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∏–∑
    #    –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    # --------------------------------------------------------------
    def load_syntax_highlighting(self):
        self.syntax_highlighting = {}
        try:
            syntax_cfg = self.config.get("syntax_highlighting", {})
            for lang, rules in syntax_cfg.items():
                patterns = rules.get("patterns", [])
                for rule in patterns:
                    try:
                        compiled = re.compile(rule["pattern"])
                        color_pair = self.colors.get(rule["color"], curses.color_pair(0))
                        self.syntax_highlighting.setdefault(lang, []).append((compiled, color_pair))
                    except Exception as e:
                        logging.exception(f"Error in syntax highlighting rule for {lang}: {rule}")
        except Exception as e:
            logging.exception("Error loading syntax highlighting")


    # --------------------------------------------------------------
    # 7. –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, –≤–∫–ª—é—á–∞—è —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞,
    #    –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫, —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞.
    # --------------------------------------------------------------
    def draw_screen(self):
        self.stdscr.clear()
        height, width = self.stdscr.getmaxyx()
        if height < 24 or width < 80:
            try:
                self.stdscr.addstr(0, 0, "Window too small (min: 80x24)", self.colors["error"])
                self.stdscr.refresh()
            except curses.error:
                pass
            return

        max_line_num = len(str(len(self.text)))
        line_num_format = f"{{:>{max_line_num}}} "
        line_num_width = len(line_num_format.format(0))
        text_width = width - line_num_width

        if self.cursor_x < self.scroll_left:
            self.scroll_left = max(0, self.cursor_x)
        elif self.cursor_x >= self.scroll_left + text_width:
            self.scroll_left = max(0, self.cursor_x - text_width + 1)

        visible_lines = height - 2
        if self.cursor_y < self.scroll_top:
            self.scroll_top = self.cursor_y
        elif self.cursor_y >= self.scroll_top + visible_lines:
            self.scroll_top = self.cursor_y - visible_lines + 1

        for screen_row in range(visible_lines):
            line_num = self.scroll_top + screen_row + 1
            if line_num > len(self.text):
                break
            try:
                self.stdscr.addstr(screen_row, 0, line_num_format.format(line_num), self.colors["line_number"])
            except curses.error:
                pass

            line = self.text[line_num - 1] if line_num <= len(self.text) else ""
            syntax_line = self.apply_syntax_highlighting(line, self.detect_language())
            x_pos = 0
            for text_part, color in syntax_line:
                if x_pos + len(text_part.encode("utf-8")) <= self.scroll_left:
                    x_pos += len(text_part.encode("utf-8"))
                    continue
                visible_start = max(0, self.scroll_left - x_pos)
                visible_part = text_part[visible_start:]
                visible_width = len(visible_part.encode("utf-8"))
                visible_part = visible_part[: text_width - (x_pos - self.scroll_left)]
                screen_x = line_num_width + (x_pos - self.scroll_left)
                try:
                    self.stdscr.addstr(screen_row, screen_x, visible_part, color)
                except curses.error:
                    pass
                x_pos += visible_width

        try:
            status_y = height - 1
            file_type = self.detect_language()
            status_msg = (
                f"File: {self.filename} | "
                f"Type: {file_type} | "
                f"Encoding: {self.encoding} | "
                f"Line: {self.cursor_y + 1}/{len(self.text)} | "
                f"Column: {self.cursor_x + 1} | "
                f"Mode: {'Insert' if self.insert_mode else 'Replace'}"
            )
            self.stdscr.addstr(status_y, 0, " " * (width - 1), self.colors["status"])
            self.stdscr.addstr(status_y, 0, status_msg, self.colors["status"])
        except curses.error:
            pass

        cursor_screen_y = self.cursor_y - self.scroll_top
        cursor_screen_x = self.cursor_x - self.scroll_left + line_num_width
        if 0 <= cursor_screen_y < visible_lines and 0 <= cursor_screen_x < width:
            try:
                self.stdscr.move(cursor_screen_y, cursor_screen_x)
            except curses.error:
                pass
        
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–∞—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫
        self.highlight_matching_brackets()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
        self.stdscr.refresh()

    # ----------------------------------------------------------------
    # 8. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ
    #    –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏.
    # ----------------------------------------------------------------
    def detect_language(self):
        ext = os.path.splitext(self.filename)[1].lower()
        logging.debug(f"Detecting language for extension: {ext}")
        for lang, exts in self.config.get("supported_formats", {}).items():
            logging.debug(f"Checking if {ext} is in {exts} for language {lang}")
            if ext in exts:
                logging.debug(f"Detected language: {lang}")
                return lang
        logging.debug("No language detected, using 'text'")
        return "text"

    #################################################################
    # 9. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç—ã—Ö –∫–ª–∞–≤–∏—à:
    #
    #   –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–æ—Ç–∫—Ä—ã—Ç—å, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —Ç.–¥.)
    #   –∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞.
    # ----------------------------------------------------------------
    def handle_input(self, key):
        """Handle keyboard input."""
        logging.debug(f"Key pressed: {key}")
        try:
            # Special keys
            if key == curses.KEY_ENTER or key == 10 or key == 13:  # Enter
                self.handle_enter()
            elif key == curses.KEY_UP or key == 259 or key == 450:  # Up arrow 259, 450
                self.handle_up()
            elif key == curses.KEY_DOWN or key == 258 or key == 456:  # Down arrow 258, 456
                self.handle_down()
            elif key == curses.KEY_LEFT or key == 260 or key == 452:  # Left arrow 260, 452
                self.handle_left()
            elif key == curses.KEY_RIGHT or key == 261 or key == 454:  # Right arrow 261, 454
                self.handle_right()
            elif key == curses.KEY_BACKSPACE or key == 127 or key == 8:  # –î–æ–±–∞–≤—å—Ç–µ 8 (PowerShell)
                self.handle_backspace()
            elif key == curses.KEY_DC or key == 330 or key == 462:  # Delete   330, 462
                self.handle_delete()
            elif key == curses.KEY_HOME or key == 262 or key == 449:  # Home  262, 449
                self.handle_home()
            elif key == curses.KEY_END or key == 360 or key == 455:  # End
                self.handle_end()
            elif key == curses.KEY_PPAGE or key == 339 or key == 451:  # Page Up
                self.handle_page_up()
            elif key == curses.KEY_NPAGE or key == 338 or key == 457:  # Page Down
                self.handle_page_down()
            elif key == 9:  # Tab
                self.handle_tab()
            elif key == 27:  # Escape
                self.handle_escape()
            # Function keys and other special keys
            elif key == self.keybindings["quit"] or key == 17 or key == 3:  # Quit
                self.exit_editor()
            elif key == self.keybindings["save_file"] or key == 19:   # Save
                self.save_file()
            elif key == self.keybindings["open_file"] or key == 15:  # Open
                self.open_file()
            # Regular character input
            elif 32 <= key <= 126:  # Printable ASCII characters
                self.handle_char_input(key)
                
        except Exception as e:
            self.status_message = f"Input error: {str(e)}"
            logging.exception("Error handling input")

    # ---------------------------------------------------------------
    # 10. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤–≤–µ—Ä—Ö –ø–æ —Å—Ç—Ä–æ–∫–∞–º.
    #     –ö–ª–∞–≤–∞–∏—à–∞ `Arr Up`.
    # ---------------------------------------------------------------
    def handle_up(self):
        """Handle up arrow key."""
        if self.cursor_y > 0:
            self.cursor_y -= 1
            self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))

    # --------------------------------------------------------------
    # 11. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤–Ω–∏–∑ –ø–æ —Å—Ç—Ä–æ–∫–∞–º.
    #     –ö–ª–∞–≤–∞–∏—à–∞ `Arr Down`.
    # --------------------------------------------------------------
    def handle_down(self):
        """Handle down arrow key."""
        if self.cursor_y < len(self.text) - 1:
            self.cursor_y += 1
            self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))

    # ---------------------------------------------------------------
    # 12. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤–ª–µ–≤–æ –Ω–∞ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –∏–ª–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é
    #     —Å—Ç—Ä–æ–∫—É. –ö–ª–∞–≤–∞–∏—à–∞ `<-`.
    # ---------------------------------------------------------------
    def handle_left(self):
        """Handle left arrow key."""
        if self.cursor_x > 0:
            self.cursor_x -= 1
        elif self.cursor_y > 0:
            self.cursor_y -= 1
            self.cursor_x = len(self.text[self.cursor_y])

    # ---------------------------------------------------------------
    # 13. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤–ø—Ä–∞–≤–æ –Ω–∞ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –∏–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é
    #     —Å—Ç—Ä–æ–∫—É. –ö–ª–∞–≤–∞–∏—à–∞ `->`.
    # ---------------------------------------------------------------
    def handle_right(self):
        """Handle right arrow key."""
        if self.cursor_x < len(self.text[self.cursor_y]):
            self.cursor_x += 1
        elif self.cursor_y < len(self.text) - 1:
            self.cursor_y += 1
            self.cursor_x = 0

    # ---------------------------------------------------------------
    # 14. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏.
    #     –ö–ª–∞–≤–∞–∏—à–∞ `Home`.
    # ---------------------------------------------------------------
    def handle_home(self):
        """Handle Home key."""
        self.cursor_x = 0

    # ---------------------------------------------------------------
    # 15. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏.
    #     –ö–ª–∞–≤–∞–∏—à–∞ `End`.
    # ---------------------------------------------------------------
    def handle_end(self):
        """Handle End key."""
        self.cursor_x = len(self.text[self.cursor_y])

    # ---------------------------------------------------------------
    # 16. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤–≤–µ—Ä—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–Ω–∞ 10 —Å—Ç—Ä–æ–∫).
    #     –ö–ª–∞–≤–∞–∏—à–∞ `PageUp`.
    # ---------------------------------------------------------------
    def handle_page_up(self):
        """Handle Page Up key."""
        height = self.stdscr.getmaxyx()[0]
        self.cursor_y = max(0, self.cursor_y - height)
        self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))
        self.scroll_top = max(0, self.scroll_top - height)

    # ---------------------------------------------------------------
    # 17. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤–Ω–∏–∑ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–Ω–∞ 10 —Å—Ç—Ä–æ–∫).
    #     –ö–ª–∞–≤–∞–∏—à–∞ `PageDown`.
    # ---------------------------------------------------------------
    def handle_page_down(self):
        """Handle Page Down key."""
        height = self.stdscr.getmaxyx()[0]
        self.cursor_y = min(len(self.text) - 1, self.cursor_y + height)
        self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))
        if self.cursor_y >= self.scroll_top + height:
            self.scroll_top = max(0, min(len(self.text) - height, self.scroll_top + height))

    # ---------------------------------------------------------------
    # 18. –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º –∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π
    #     —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π. –ö–ª–∞–≤–∞–∏—à–∞ `Delete`.
    # ---------------------------------------------------------------
    def handle_delete(self):
        """Handle delete key."""
        if self.cursor_x < len(self.text[self.cursor_y]):
            # Delete character at cursor
            line = self.text[self.cursor_y]
            self.text[self.cursor_y] = line[:self.cursor_x] + line[self.cursor_x+1:]
            self.modified = True
        elif self.cursor_y < len(self.text) - 1:
            # Join with next line
            self.text[self.cursor_y] += self.text.pop(self.cursor_y + 1)
            self.modified = True

    # ---------------------------------------------------------------
    # 19. –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ —Å–ª–µ–≤–∞ –æ—Ç –∫—É—Ä—Å–æ—Ä–∞ –∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π
    #     —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π. –ö–ª–∞–≤–∞–∏—à–∞ `Backspace`.
    # ---------------------------------------------------------------
    def handle_backspace(self):
        """Handle backspace key."""
        if self.cursor_x > 0:
            # Delete character before cursor
            line = self.text[self.cursor_y]
            self.text[self.cursor_y] = line[:self.cursor_x-1] + line[self.cursor_x:]
            self.cursor_x -= 1
            self.modified = True
        elif self.cursor_y > 0:
            # Join with previous line
            self.cursor_y -= 1
            self.cursor_x = len(self.text[self.cursor_y])
            self.text[self.cursor_y] += self.text.pop(self.cursor_y + 1)
            self.modified = True

    # Tab
    def handle_tab(self):
        """Handle Tab key - insert spaces or tab character based on configuration"""

        # Default to 4 spaces, but this could be configurable
        tab_size = self.config.get("editor", {}).get("tab_size", 4)
        use_spaces = self.config.get("editor", {}).get("use_spaces", True)

        current_line = self.text[self.cursor_y]

        if use_spaces:
            # Insert spaces for tab
            spaces = " " * tab_size
            self.text[self.cursor_y] = (
                current_line[: self.cursor_x] + spaces + current_line[self.cursor_x :]
            )
            self.cursor_x += tab_size
        else:
            # Insert actual tab character
            self.text[self.cursor_y] = (
                current_line[: self.cursor_x] + "\t" + current_line[self.cursor_x :]
            )
            self.cursor_x += 1

        self.modified = True

    # Smart Tab implement smart indentation that aligns with the indentation of the previous line
    def handle_smart_tab(self):
        """Smart tab that respects the indentation of the previous line"""
        if self.cursor_y > 0:
            prev_line = self.text[self.cursor_y - 1]
            # Calculate leading whitespace
            leading_space_match = re.match(r"^(\s*)", prev_line)
            if leading_space_match:
                leading_space = leading_space_match.group(1)
                # Only apply if we're at the beginning of the line
                if self.cursor_x == 0:
                    self.text[self.cursor_y] = leading_space + self.text[self.cursor_y]
                    self.cursor_x = len(leading_space)
                    self.modified = True
                    return

        # Fall back to regular tab if not at beginning or no previous line
        self.handle_tab()

    # ---------------------------------------------------------------
    # 19a. –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è/–≤—ã—Ä–µ–∑–∞–Ω–∏—è).
    # ---------------------------------------------------------------
    def start_selection(self):
        """TODO: –ù–∞—á–∞–ª–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞."""
        pass

    def end_selection(self):
        """TODO: –ö–æ–Ω–µ—Ü –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞."""
        pass

    # ---------------------------------------------------------------
    # 19b. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.
    # TODO:
    # ---------------------------------------------------------------
    def copy_selection(self):
        """TODO: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–∞."""
        pass

    # ---------------------------------------------------------------
    # 19c. –í—ã—Ä–µ–∑–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.
    # TODO:
    # ---------------------------------------------------------------
    def cut_selection(self):
        """TODO: –í—ã—Ä–µ–∑–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
        pass

    # ---------------------------------------------------------------
    # 19d. –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞.
    # TODO:
    # ---------------------------------------------------------------
    def paste_from_clipboard(self):
        """TODO: –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞."""
        pass

    # ---------------------------------------------------------------
    # 19e. –û—Ç–º–µ–Ω–∞ –∏ –ø–æ–≤—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.
    # TODO:
    # ---------------------------------------------------------------
    def undo(self):
        """TODO: –û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
        pass
    
    # TODO:
    def redo(self):
        """TODO: –ü–æ–≤—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–º–µ–Ω—ë–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
        pass

    # ---------------------------------------------------------------
    # 20. –í–≤–æ–¥ –æ–±—ã—á–Ω–æ–≥–æ –ø–µ—á–∞—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞.
    # ---------------------------------------------------------------
    def handle_char_input(self, key):
        try:
            char = chr(key)
            current_line = self.text[self.cursor_y]
            if self.insert_mode:
                self.text[self.cursor_y] = (
                    current_line[: self.cursor_x] + char + current_line[self.cursor_x :]
                )
            else:
                self.text[self.cursor_y] = (
                    current_line[: self.cursor_x]
                    + char
                    + (
                        current_line[self.cursor_x + 1 :]
                        if self.cursor_x < len(current_line)
                        else ""
                    )
                )
            self.cursor_x += 1
            self.modified = True
        except (ValueError, UnicodeEncodeError):
            logging.error(f"Cannot encode character: {key}")


    def handle_enter(self):
        """Handle enter key press."""
        self.text.insert(self.cursor_y + 1, "")  # Insert new empty line
        content = self.text[self.cursor_y][self.cursor_x:]  # Get content after cursor
        self.text[self.cursor_y] = self.text[self.cursor_y][:self.cursor_x]  # Keep content before cursor
        self.text[self.cursor_y + 1] = content  # Move content after cursor to new line
        self.cursor_y += 1  # Move cursor to next line
        self.cursor_x = 0  # Move cursor to start of line
        self.modified = True


    # ===============================================================
    # 21. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –∏–∑
    #     –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∫–ª–∞–≤–∏—à–∏.
    # ---------------------------------------------------------------
    def parse_key(self, key_str):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –≤ –∫–æ–¥ –∫–ª–∞–≤–∏—à–∏.
        """
        if not key_str:
            return -1

        parts = key_str.split("+")
        if len(parts) == 2 and parts[0].lower() == "ctrl":  # Changed & to and
            return ord(parts[1].lower()) - ord('a') + 1
        elif key_str.lower() == "del":
            return curses.KEY_DC
        elif key_str.lower() == "insert":
            return curses.KEY_IC
        try:
            return ord(key_str)
        except TypeError:
            return -1

    # ---------------------------------------------------------------
    # 22. –†–∞—Å—á—ë—Ç —à–∏—Ä–∏–Ω—ã —Å–∏–º–≤–æ–ª–∞ —Å —É—á—ë—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π UTF-8
    #     –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—É—à–∏—Ä–æ–∫–∏—Ö –∏ –ø–æ–ª–Ω–æ—à–∏—Ä–æ–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.
    # ---------------------------------------------------------------
    def get_char_width(self, char):
        """Calculate the display width of a character"""
        try:
            if ord(char) < 128:
                return 1
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º east_asian_width –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã —Å–∏–º–≤–æ–ª–∞
            width = unicodedata.east_asian_width(char)
            if width in ("F", "W"):  # Full-width characters
                return 2
            elif width == "A":  # Ambiguous width
                return 2
            else:
                return 1
        except (UnicodeEncodeError, TypeError):
            return 1

    # =================================================================
    # 23. –û—Ç–∫—Ä—ã—Ç–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–∞–π–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º
    #     –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä.
    #     –ú–æ–¥—É–ª—å `—Åhardet`.
    # -----------------------------------------------------------------
    def open_file(self):
        if self.modified:
            choice = self.prompt("Save changes? (y/n): ")
            if choice and choice.lower().startswith("y"):
                self.save_file()

        filename = self.prompt("Open file: ")
        if not filename:
            self.status_message = "Open cancelled"
            return

        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞
            with open(filename, "rb") as f:
                result = chardet.detect(f.read())
                self.encoding = result["encoding"] or "UTF-8"

            with open(filename, "r", encoding=self.encoding, errors="replace") as f:
                self.text = f.read().splitlines()
                if not self.text:
                    self.text = [""]
            self.filename = filename
            self.modified = False
            self.set_initial_cursor_position()
            self.status_message = f"Opened {filename} with encoding {self.encoding}"
            curses.flushinp()  # –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –≤–≤–æ–¥–∞
        except ImportError:
            # –ï—Å–ª–∏ –º–æ–¥—É–ª—å chardet –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º UTF-8
            try:
                with open(filename, "r", encoding="utf-8", errors="replace") as f:
                    self.text = f.read().splitlines()
                    if not self.text:
                        self.text = [""]
                self.filename = filename
                self.encoding = "UTF-8"
                self.modified = False
                self.set_initial_cursor_position()
                self.status_message = f"Opened {filename}"
                curses.flushinp()  # –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –≤–≤–æ–¥–∞
            except FileNotFoundError:
                self.status_message = f"File not found: {filename}"
                logging.error(f"File not found: {filename}")
            except OSError as e:
                self.status_message = f"Error opening file: {e}"
                logging.exception(f"Error opening file: {filename}")
            except Exception as e:
                self.status_message = f"Error opening file: {e}"
                logging.exception(f"Error opening file: {filename}")
        except FileNotFoundError:
            self.status_message = f"File not found: {filename}"
            logging.error(f"File not found: {filename}")
        except OSError as e:
            self.status_message = f"Error opening file: {e}"
            logging.exception(f"Error opening file: {filename}")
        except Exception as e:
            self.status_message = f"Error opening file: {e}"
            logging.exception(f"Error opening file: {filename}")

    # ---------------------------------------------------------------
    # 24. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤ —Ñ–∞–π–ª —Å
    #     –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –∑–∞–ø–∏—Å—å.
    # ---------------------------------------------------------------
    def save_file(self):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞. –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è pylint –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ,
        —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.
        """
        if self.filename == "noname":
            self.filename = self.prompt("Save as: ")
            if not self.filename:
                self.status_message = "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
                return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ self.filename –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
        if os.path.isdir(self.filename):
            self.status_message = f"Cannot save: {self.filename} is a directory"
            return

        if os.path.exists(self.filename):
            if not os.access(self.filename, os.W_OK):
                self.status_message = f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å: {self.filename}"
                return
        try:
            with open(self.filename, "w", encoding=self.encoding, errors="replace") as f:
                f.write(os.linesep.join(self.text))
            self.modified = False
            self.status_message = f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {self.filename}"
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º pylint –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            code = os.linesep.join(self.text)
            threading.Thread(target=self.run_pylint_async, args=(code,), daemon=True).start()
        except OSError as e:
            self.status_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {self.filename}")
        except Exception as e:
            self.status_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {self.filename}")


    # ---------------------------------------------------------------
    # 24a. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ–¥ –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º.
    # 
    # ---------------------------------------------------------------
    def save_file_as(self):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ–¥ –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º.
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –æ–±–Ω–æ–≤–ª—è–µ—Ç self.filename,
        —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç pylint –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
        """
        new_filename = self.prompt("Save file as: ")
        if not new_filename:
            self.status_message = "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ: –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            return

        if os.path.isdir(new_filename):
            self.status_message = f"Cannot save: {new_filename} is a directory"
            return

        if os.path.exists(new_filename):
            if not os.access(new_filename, os.W_OK):
                self.status_message = f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å: {new_filename}"
                return

        try:
            with open(new_filename, "w", encoding=self.encoding, errors="replace") as f:
                f.write(os.linesep.join(self.text))
            self.filename = new_filename
            self.modified = False
            self.status_message = f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {new_filename}"
            
            code = os.linesep.join(self.text)
            threading.Thread(target=self.run_pylint_async, args=(code,), daemon=True).start()
        except (OSError, Exception) as e:
            self.status_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {new_filename}")
                

    # ---------------------------------------------------------------
    # 24b. –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —Ñ–∞–π–ª–∞.
    # ---------------------------------------------------------------
    def revert_changes(self):
        """
        –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–º —Ñ–∞–π–ª–µ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –±—ã–ª –ª–∏ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Ä–∞–Ω–µ–µ
        if self.filename == "noname":
            self.status_message = "Cannot revert: file has not been saved yet"
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(self.filename):
            self.status_message = f"Cannot revert: file {self.filename} does not exist"
            return

        # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        confirmation = self.prompt("Revert to last saved version? All unsaved changes will be lost. (y/n): ")
        if not confirmation or confirmation.lower() != 'y':
            self.status_message = "Revert cancelled"
            return

        try:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
            with open(self.filename, "r", encoding=self.encoding, errors="replace") as f:
                self.text = f.read().splitlines()
                if not self.text:
                    self.text = [""]  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É

            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
            self.modified = False
            self.set_initial_cursor_position()
            self.status_message = f"Reverted to last saved version of {self.filename}"

        except OSError as e:
            self.status_message = f"Error reverting file: {e}"
            logging.exception(f"Error reverting file: {self.filename}")
        except Exception as e:
            self.status_message = f"Unexpected error: {e}"
            logging.exception(f"Unexpected error reverting file: {self.filename}")


    # ---------------------------------------------------------------
    # 24c. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞.
    # ---------------------------------------------------------------
    def new_file(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É—Å—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if self.modified:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            choice = self.prompt("Save changes? (y/n): ")
            if choice and choice.lower().startswith("y"):
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "y", —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
                self.save_file()
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "n" –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
            self.text = [""]  # –û–¥–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            self.filename = "noname"  # –ò–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            self.modified = False  # –ù–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –∏–º–µ–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
            self.set_initial_cursor_position()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ
            self.status_message = "New file created"  # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
        except Exception as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
            self.status_message = f"Error creating new file: {e}"
            logging.exception("Error creating new file")


    # ---------------------------------------------------------------
    # 25. –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞
    #     —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    # ---------------------------------------------------------------
    def exit_editor(self):
        if self.modified:
            choice = self.prompt("Save changes? (y/n): ")
            if choice and choice.lower().startswith("y"):
                self.save_file()
        curses.endwin()  # Restore terminal state
        sys.exit(0)

    def handle_escape(self):
        """Handle escape key press"""
        if self.modified:
            choice = self.prompt("Save changes before exit? (y/n): ")
            if choice and choice.lower().startswith('y'):
                self.save_file()
        self.exit_editor()

    # ---------------------------------------------------------------
    # 26. –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    #     —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    # ---------------------------------------------------------------
    def prompt(self, message):
        self.stdscr.nodelay(False)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
        curses.echo()
        try:
            self.stdscr.addstr(curses.LINES - 1, 0, message)
            self.stdscr.clrtoeol()
            self.stdscr.refresh()
            # Use a larger buffer for UTF-8 input
            response = (
                self.stdscr.getstr(curses.LINES - 1, len(message), 1024)
                .decode("utf-8", errors="replace")
                .strip()
            )
        except Exception as e:
            response = ""
            logging.exception("Prompt error")
        finally:
            curses.noecho()
            self.stdscr.nodelay(
                False
            )  # –û—Å—Ç–∞–≤–ª—è–µ–º –≤ –±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        return response

    # ---------------------------------------------------------------
    # 27. –ü–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ –≤—Å–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—Ç
    #     –ø–æ–∑–∏—Ü–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.
    # ---------------------------------------------------------------
    def search_text(self, search_term):
        """Add search functionality"""
        matches = []
        for line_num, line in enumerate(self.text):
            for match in re.finditer(re.escape(search_term), line):
                matches.append((line_num, match.start(), match.end()))
        return matches

    # ---------------------------------------------------------------
    # 28. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å, –¥–ª–∏–Ω—É –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å.
    # ---------------------------------------------------------------
    def validate_filename(self, filename):
        """Add filename validation"""
        if not filename or len(filename) > 255:
            return False
        if os.path.isabs(filename):
            base_dir = os.path.dirname(os.path.abspath(filename))
            return os.path.commonpath([base_dir, os.getcwd()]) == os.getcwd()
        return True

    # ===================================================================
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞:

    # ---------------------------------------------------------------
    # 28a. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π shell-–∫–æ–º–∞–Ω–¥—ã.
    # ---------------------------------------------------------------
    def execute_shell_command(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ shell-–∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞."""
        command = self.prompt("Enter command: ")
        if not command:
            self.status_message = "Command cancelled"
            return
        
        try:
            # Save screen state
            curses.def_prog_mode()
            curses.endwin()
            
            # Execute command
            process = subprocess.Popen(
                command,
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            output, error = process.communicate(timeout=30)
            
            # Restore screen
            curses.reset_prog_mode()
            self.stdscr.refresh()
            
            if error:
                self.status_message = f"Error: {error[:50]}..."
            else:
                self.status_message = f"Command executed: {output[:50]}..."
                
        except subprocess.TimeoutExpired:
            self.status_message = "Command timed out"
        except Exception as e:
            self.status_message = f"Error executing command: {str(e)}"

    # ---------------------------------------------------------------
    # 28b. –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Git (commit, push, pull, diff).
    # ---------------------------------------------------------------
    def integrate_git(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ Git."""
        commands = {
            '1': ('status', 'git status'),
            '2': ('commit', 'git commit -a'),
            '3': ('push', 'git push'),
            '4': ('pull', 'git pull'),
            '5': ('diff', 'git diff')
        }
        
        menu = "\n".join([f"{k}: {v[0]}" for k, v in commands.items()])
        choice = self.prompt(f"Select Git command:\n{menu}\nChoice: ")
        
        if choice in commands:
            try:
                curses.def_prog_mode()
                curses.endwin()
                
                process = subprocess.run(
                    commands[choice][1],
                    shell=True,
                    text=True,
                    capture_output=True
                )
                
                curses.reset_prog_mode()
                self.stdscr.refresh()
                
                if process.returncode == 0:
                    self.status_message = f"Git {commands[choice][0]} successful"
                else:
                    self.status_message = f"Git error: {process.stderr[:50]}..."
                    
            except Exception as e:
                self.status_message = f"Git error: {str(e)}"
        else:
            self.status_message = "Invalid choice"

    # ---------------------------------------------------------------
    # 28—Å. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
    # ---------------------------------------------------------------
    def goto_line(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ."""
        line_num = self.prompt("Go to line: ")
        try:
            line_num = int(line_num)
            if 1 <= line_num <= len(self.text):
                self.cursor_y = line_num - 1
                self.cursor_x = 0
                # Ensure the line is visible
                height = self.stdscr.getmaxyx()[0]
                if self.cursor_y < self.scroll_top:
                    self.scroll_top = max(0, self.cursor_y - height//2)
                elif self.cursor_y >= self.scroll_top + height - 2:
                    self.scroll_top = min(len(self.text) - height + 2, self.cursor_y - height//2)
            else:
                self.status_message = f"Line number out of range (1-{len(self.text)})"
        except ValueError:
            self.status_message = "Invalid line number"

    # ---------------------------------------------------------------
    # 28d. –ü–æ–∏—Å–∫ –∏ –∑–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π.
    # ---------------------------------------------------------------
    def find_and_replace(self):
        """–ü–æ–∏—Å–∫ –∏ –∑–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π regex."""
        search_term = self.prompt("Search for: ")
        if not search_term:
            return
            
        replace_term = self.prompt("Replace with: ")
        if replace_term is None:  # User cancelled
            return
            
        try:
            count = 0
            for i in range(len(self.text)):
                new_line = re.sub(search_term, replace_term, self.text[i])
                if new_line != self.text[i]:
                    count += len(re.findall(search_term, self.text[i]))
                    self.text[i] = new_line
                    self.modified = True
                    
            self.status_message = f"Replaced {count} occurrences"
        except re.error as e:
            self.status_message = f"Invalid regex pattern: {str(e)}"
        except Exception as e:
            self.status_message = f"Error during replace: {str(e)}"

    # ---------------------------------------------------------------
    # 28e. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≤—Å—Ç–∞–≤–∫–∏/–∑–∞–º–µ–Ω—ã.
    # ---------------------------------------------------------------
    def toggle_insert_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É Insert –∏ Replace —Ä–µ–∂–∏–º–∞–º–∏."""
        self.insert_mode = not self.insert_mode
        self.status_message = f"Mode: {'Insert' if self.insert_mode else 'Replace'}"


    # ---------------------------------------------------------------
    # 28 f. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–Ω–æ–π —Å–∫–æ–±–∫–∏
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –ø–∞—Ä–Ω—É—é —Å–∫–æ–±–∫—É –¥–ª—è —Ç–æ–π, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫—É—Ä—Å–æ—Ä.    
    # ---------------------------------------------------------------
    def find_matching_bracket(self, line, col, bracket):
        """
        –ò—â–µ—Ç –ø–∞—Ä–Ω—É—é —Å–∫–æ–±–∫—É –¥–ª—è —Å–∫–æ–±–∫–∏ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º.
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            line (str): —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞
            col (int): –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –≤ —Å—Ç—Ä–æ–∫–µ
            bracket (str): —Å–∏–º–≤–æ–ª —Å–∫–æ–±–∫–∏ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            tuple (int, int): (—Å—Ç—Ä–æ–∫–∞, —Å—Ç–æ–ª–±–µ—Ü) –ø–∞—Ä–Ω–æ–π —Å–∫–æ–±–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        brackets = {'(': ')', '{': '}', '[': ']', ')': '(', '}': '{', ']': '['}
        stack = []
        direction = 1 if bracket in '({[' else -1  # –í–ø–µ—Ä–µ–¥ –¥–ª—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö, –Ω–∞–∑–∞–¥ –¥–ª—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö
        start = col + direction

        if direction == 1:  # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
            for i in range(start, len(line)):
                char = line[i]
                if char in '({[':
                    stack.append(char)
                elif char in ')}]':
                    if not stack:
                        return None
                    top = stack.pop()
                    if brackets[top] != char:
                        return None
                    if not stack:  # –°—Ç–µ–∫ –ø—É—Å—Ç ‚Äî –Ω–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞
                        return (self.cursor_y, i)
        else:  # –ò—â–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
            for i in range(start, -1, -1):
                char = line[i]
                if char in ')}]':
                    stack.append(char)
                elif char in '({[':
                    if not stack:
                        return None
                    top = stack.pop()
                    if brackets[char] != top:
                        return None
                    if not stack:  # –°—Ç–µ–∫ –ø—É—Å—Ç ‚Äî –Ω–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞
                        return (self.cursor_y, i)
        return None


    # ---------------------------------------------------------------
    # 28ff. –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–∞—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ.
    # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ - –û–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–∏–º–≤–æ–ª –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å 
    # –∫–∞–∫ —Ç–µ–∫—É—â—É—é —Å–∫–æ–±–∫—É, —Ç–∞–∫ –∏ –µ—ë –ø–∞—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞.
    # ---------------------------------------------------------------
    def highlight_matching_brackets(self):
        """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–∞—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É—Ä—Å–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–µ–∫—Å—Ç–∞
        if not (0 <= self.cursor_y < len(self.text) and 0 <= self.cursor_x < len(self.text[self.cursor_y])):
            return

        line = self.text[self.cursor_y]
        char = line[self.cursor_x]

        # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º ‚Äî —Å–∫–æ–±–∫–∞
        if char in '(){}[]':
            match_pos = self.find_matching_bracket(line, self.cursor_x, char)
            if match_pos:
                height, width = self.stdscr.getmaxyx()
                # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ–±–∫—É
                if (0 <= self.cursor_y - self.scroll_top < height and 
                    0 <= self.cursor_x - self.scroll_left < width):
                    self.stdscr.addch(self.cursor_y - self.scroll_top, 
                                    self.cursor_x - self.scroll_left, 
                                    char, 
                                    curses.A_REVERSE)

                # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø–∞—Ä–Ω—É—é —Å–∫–æ–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∏–¥–∏–º–∞
                match_y, match_x = match_pos
                if (0 <= match_y - self.scroll_top < height and 
                    0 <= match_x - self.scroll_left < width):
                    self.stdscr.addch(match_y - self.scroll_top, 
                                    match_x - self.scroll_left, 
                                    line[match_x], 
                                    curses.A_REVERSE)




    # ---------------------------------------------------------------
    # 28i. –ü–æ–∏—Å–∫ –∏ –∑–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π.
    # ---------------------------------------------------------------
    def search_and_replace(self):
        """
        –ü–æ–∏—Å–∫ –∏ –∑–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π regex.
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–º–µ–Ω—ã,
        –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–º–µ–Ω—É –≤–æ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ –∏ —Å–æ–æ–±—â–∞–µ—Ç –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–º–µ–Ω.
        """
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ (regex)
        search_pattern = self.prompt("Enter search pattern (regex): ")
        if not search_pattern:
            self.status_message = "Search cancelled"
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–º–µ–Ω—ã
        replace_with = self.prompt("Enter replacement string: ")
        if replace_with is None:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ prompt –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
            self.status_message = "Replacement cancelled"
            return

        try:
            # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            compiled_pattern = re.compile(search_pattern)
            new_text = []
            replacements = 0

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            for line in self.text:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—É –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω
                new_line, count = compiled_pattern.subn(replace_with, line)
                new_text.append(new_line)
                replacements += count

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
            self.text = new_text
            self.modified = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.status_message = f"Replaced {replacements} occurrence(s)"

        except re.error as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            self.status_message = f"Invalid regex pattern: {e}"
        except Exception as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
            self.status_message = f"Error during search and replace: {e}"

    # ---------------------------------------------------------------
    # 28j. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏.
    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
    # ---------------------------------------------------------------
    def session_save(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞."""
        pass

    def session_restore(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞."""
        pass

    # ---------------------------------------------------------------
    # 28k. –í–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    # ---------------------------------------------------------------
    def toggle_auto_save(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."""
        self.auto_save = getattr(self, 'auto_save', False)
        self.auto_save = not self.auto_save
        
        if self.auto_save:
            def auto_save_thread():
                while self.auto_save:
                    time.sleep(60)  # Auto-save every minute
                    if self.modified:
                        self.save_file()
            
            threading.Thread(target=auto_save_thread, daemon=True).start()
            self.status_message = "Auto-save enabled"
        else:
            self.status_message = "Auto-save disabled"

    # ---------------------------------------------------------------
    # 28l. –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞.
    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
    # ---------------------------------------------------------------
    def encrypt_file(self):
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞."""
        pass

    def decrypt_file(self):
        """–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞."""
        pass

    # ---------------------------------------------------------------
    # 28m. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.
    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
    # ---------------------------------------------------------------
    def validate_configuration(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ YAML/TOML/JSON —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º."""
        pass

    # ===============================================================
    # 29. –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏
    #     –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    # ---------------------------------------------------------------
    def run(self):
        # –£–¥–∞–ª—è–µ–º sleep –¥–ª—è –±–æ–ª–µ–µ –æ—Ç–∑—ã–≤—á–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        while True:
            try:
                self.draw_screen()
                self.stdscr.keypad(True)
                key = self.stdscr.getch()
                self.handle_input(key)
            except KeyboardInterrupt:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
                self.exit_editor()
            except Exception as e:
                logging.exception("Unhandled exception in main loop")
                self.status_message = f"Error: {str(e)}"


####################################################################
# 30. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å —É—á—ë—Ç–æ–º –ª–æ–∫–∞–ª–∏, –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤—ã–≤–æ–¥–∞
#     –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
# -------------------------------------------------------------------
def main(stdscr):
    os.environ["LANG"] = "en_US.UTF-8"
    locale.setlocale(locale.LC_ALL, "")
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.buffer, errors="replace")
    editor = SwayEditor(stdscr)
    try:
        if len(sys.argv) > 1:
            editor.filename = sys.argv[1]
            editor.open_file()
    except Exception as e:
        logging.exception(f"Error opening file from command line: {e}")
    editor.run()


# ==================== Main Entry Point ====================
# 31. :) –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# -----------------------------------------------------------
if __name__ == "__main__":
    config = load_config()
    print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
    print(config)
    try:
        curses.wrapper(main)
    except Exception as e:
        logging.exception("Unhandled exception in main")
        print("An error occurred. See editor.log for details.")
        error_log_path = os.path.join(os.path.dirname(__file__), "error.log")
        with open(error_log_path, "a") as error_file:
            error_file.write(traceback.format_exc())

        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ {error_log_path}.")
        sys.exit(1)